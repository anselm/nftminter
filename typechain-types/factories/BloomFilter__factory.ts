/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { BloomFilter, BloomFilterInterface } from "../BloomFilter";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_bitmap",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "_hashCount",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "_item",
        type: "bytes32",
      },
    ],
    name: "addToBitmap",
    outputs: [
      {
        internalType: "uint256",
        name: "_newBitmap",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_bitmap",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "_hashCount",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "_item",
        type: "bytes32",
      },
    ],
    name: "falsePositive",
    outputs: [
      {
        internalType: "bool",
        name: "_probablyPresent",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_itemNum",
        type: "uint256",
      },
    ],
    name: "getHashCount",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x61046261003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c806312540bc71461005057806316ccd1ec14610078578063250e7a4a14610099575b600080fd5b61006361005e36600461034a565b6100be565b60405190151581526020015b60405180910390f35b61008b61008636600461034a565b6101e8565b60405190815260200161006f565b6100ac6100a7366004610332565b6102f2565b60405160ff909116815260200161006f565b6000808360ff16116101175760405162461bcd60e51b815260206004820152601a60248201527f4861736820636f756e742063616e206e6f74206265207a65726f00000000000060448201526064015b60405180910390fd5b60005b8360ff168110156101db5760006101008483604051602001610146929190918252602082015260400190565b6040516020818303038152906040528051906020012060001c61016991906103ec565b905061010081106101ad5760405162461bcd60e51b815260206004820152600e60248201526d27bb32b9333637bb9032b93937b960911b604482015260640161010e565b6001811b86811787146101c657600093505050506101e1565b505080806101d3906103d1565b91505061011a565b50600190505b9392505050565b8260ff83166102395760405162461bcd60e51b815260206004820152601a60248201527f4861736820636f756e742063616e206e6f74206265207a65726f000000000000604482015260640161010e565b60005b8360ff168110156102ea5760006101008483604051602001610268929190918252602082015260400190565b6040516020818303038152906040528051906020012060001c61028b91906103ec565b905061010081106102cf5760405162461bcd60e51b815260206004820152600e60248201526d27bb32b9333637bb9032b93937b960911b604482015260640161010e565b6001901b9190911790806102e2816103d1565b91505061023c565b509392505050565b6000806103008360646103b2565b61030c9061900061039e565b610317906001610386565b90506101008110156103295792915050565b5060ff92915050565b600060208284031215610343578081fd5b5035919050565b60008060006060848603121561035e578182fd5b83359250602084013560ff81168114610375578283fd5b929592945050506040919091013590565b6000821982111561039957610399610400565b500190565b6000826103ad576103ad610416565b500490565b60008160001904831182151516156103cc576103cc610400565b500290565b60006000198214156103e5576103e5610400565b5060010190565b6000826103fb576103fb610416565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea2646970667358221220400b38b2d01d1299b44238ff970fd84c39d739cb9d3352f216b79c2fcb60c62d64736f6c63430008040033";

type BloomFilterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BloomFilterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BloomFilter__factory extends ContractFactory {
  constructor(...args: BloomFilterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BloomFilter> {
    return super.deploy(overrides || {}) as Promise<BloomFilter>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BloomFilter {
    return super.attach(address) as BloomFilter;
  }
  connect(signer: Signer): BloomFilter__factory {
    return super.connect(signer) as BloomFilter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BloomFilterInterface {
    return new utils.Interface(_abi) as BloomFilterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BloomFilter {
    return new Contract(address, _abi, signerOrProvider) as BloomFilter;
  }
}
